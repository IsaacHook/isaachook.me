[
{
	"uri": "https://isaachook.me/wifi-projects/",
	"title": " Wifi Projects",
	"tags": [],
	"description": "",
	"content": " Wifi Projects  "
},
{
	"uri": "https://isaachook.me/wifi-projects/hello-world-with-the-esp8266/",
	"title": "Hello World with the ESP8266",
	"tags": [],
	"description": "",
	"content": " The ESP8266 is an affordable WIFI chip which is the answer to pretty much any question like \u0026ldquo;how do I give this WIFI?\u0026rdquo;.\nThe chip comes in a variety of modules named esp-XX. The most common ones are from AI-Thinkers but Espressif Systems (the maker of the chip) also have their own. A list of the different modules can be found here.\nThe board in the picture below is the low cost esp-01 module you can buy off ebay for $2 or so, with the antenna, clock, resistors etc already wired up.\n   Pin Description     VCC 3.3V   GPIO_0 General purpose input/output 0   GPIO_2 General purpose input/output 2   CHIP_PD Chip enable   GND Ground   RX Receive   TX Trasmit    Communicating with the ESP8266 There a bunch of different ways of speaking to the ESP8266 chip according to the datasheet. Either via SPI, I2C, or UART, which are all just communication protocols.\nOn the esp-01 module, only the RX (receive) and TX (transmit) pins required for UART communication are available. UART stands for universal asynchronous receiver/transmitter, a good explanation of it can be found at circuit basic along with explanations of the SPI and I2C protocols.\nTo connect your ESP8266 module to your computer you can either use a USB to UART serial adapter or if you have an Arduino Uno than you can use your Arduino Uno as a serial adapter.\nWiring up your module The schematic below shows how to wire up your module with the Arduino Uno.\n There are a couple of things I found confusing initially when linking everything up.\nShould RX -\u0026gt; TX or RX -\u0026gt; RX?\nIf you wanted to think about this intuitively you could probably argue either of these equally. When we are connecting devices together you actually connect RX -\u0026gt; TX and vice versa. However in our case we are not really using the Arduino, we are just using it\u0026rsquo;s serial adapter capability. Therefore we actually wire up RX -\u0026gt; RX and TX -\u0026gt; TX.\nESP8266 needs to be powered via an external source\nThe Arduino does have a 3.3V output port, however it can only provide up to 50mA of current. The ESP8266 is super thirsty and needs on average 80mA of current.\nA voltage divider needs to be used on the RX line\nArduino is a 5V board and the ESP8266 is a 3.3V board, therefore a voltage divider needs to be used to match the logic levels. There are also a couple of other options that could be used instead of a voltage divider (Logic converter, Zener diode).\nHow come this works without boosting the voltage on the TX line to 5V\nArduino defines logic HIGH as a voltage greater than 3V. Since we are using 3.3V there is no need to step this up.\nSending your first command Now that the module is all wired up we can start sending it commands. The chip should come pre-loaded with firmware that allows you to send AT commands. AT commands are just an instruction set used for controlling modems. The full list available can be found in Espressif\u0026rsquo;s documentation.\nHere are the steps to get it working:\n Upload the bare minimum sketch to the Arduino to clear any previous programs Open the serial monitor and select the options \u0026ldquo;Both NL \u0026amp; CR\u0026rdquo; and \u0026ldquo;115200 baud\u0026rdquo;  Type AT, hit send and you should see the response OK If not touch the RESET pin on the ESP8266 to ground and try again  Your browser does not support the video tag.  "
},
{
	"uri": "https://isaachook.me/wifi-projects/uploading-arduino-ide-to-esp8266/",
	"title": "Uploading the Arduino IDE to the ESP8266",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://isaachook.me/wifi-projects/understanding-how-the-internet-works/",
	"title": "Understanding the how the Internet Works",
	"tags": [],
	"description": "",
	"content": " To understand exactly what I can do with the ESP8266 or any other WIFI module I wanted to get a clearer picture of how the Internet actually works. At the moment, there are a bunch of terms which I only have a fuzzy understanding of (web server, web client, DNS, CNAME, HTTP\u0026hellip;) and I\u0026rsquo;m not sure how all the components of the Internet fit together (what actually is a modem/router?).\nIn writing this I hope to answer:\n At a high level how does the Internet actually work? If the Internet was rebuilt from scratch today, what would be the simplest example of this? Two computers over one wire? How do all the components fit together? What are the components? Get an understanding of all the terminology Work out:  Could I host an external website on a WIFI module? If I connected the WIFI module to a WIFI network what are the ways I can communicate with other computers on that network? If I wanted to turn a module into a simple Internet connected switch, what would be the best way to do this so that setup is super simple and can be accessed anywhere?   At a High Level Khan Academy - Nice introduction\nHow the Internet Works in 5 Minutes - A nice 5min intro video Computer Networking A Top-Down Approach How the Internet Works: An Explanation Even Non-Techies Can Understand\n"
},
{
	"uri": "https://isaachook.me/wifi-projects/wifi-salt-lamp/",
	"title": "Wifi Salt Lamp (Part 1)",
	"tags": [],
	"description": "",
	"content": " The end goal of this project is to get a working wifi powerboard. As a stepping stone I have started with one power point and am using a salt lamp to test. This post is a write up of what I have done so far, what I learnt, information I used from datasheets and challenges etc\u0026hellip;\nTop Level-ish Schematic The schematic below shows how all the components fits together.\nThe setup is pretty simple, there are basically three parts. The voltage shifter which takes 5V to 3.3V to keep the ESP8266 happy. There is the ESP8266 setup itself with the arduino\u0026rsquo;s only purpose being to flash the device with the program. And there is the relay which turns on/off the mains power (controlled by the ESP8266).\nAnd here is a picture of the actual setup. The only difference between this and the schematic is that I used a plug instead of a salt lamp directly. Just so that it could be used with other devices. And also to insulate the relay, to like prevent death and that.\n Mainly for my future reference, here is a list of components used:\n   Component Description     ESP8266 esp-01 Wifi module to control the relay   Relay 250VAC 10A Control mains power   Arduino Uno To flash ESP8266. Could have used UART serial adapter   Switching Power Supply Supply 5V and up to 0.5A   Op Amp: UA741CP General purpose op amp for voltage shifting circuitry   BJT: TIP141C Medium power BJT for supplying 3.3V, needs to be able to handle \u0026lt;= 1A   BJT: BC548B Low power BJT for switching relay on/off.    The sections below describe the process of building each section of the circuit and (hopefully) all the questions I had when making it.\nVoltage Shifter 5V to 3.3V The ESP8266 uses 3.3V and the Relay uses 5V therefore voltage shifting circuitry was needed. There are a lot of people on the internet saying that they were able to use the module with 5V, but for reliability I choose to follow the specs.\nThe requirements were:\n 5V input 3.3V output Variable load impedance  ! example\nESP8266 The ESP8266 was setup and flashed using the arduino as described in previous posts (\u0026ldquo;hello world\u0026hellip;\u0026rdquo; and \u0026ldquo;uploading arduino ide\u0026hellip;\u0026rdquo;) with a few additions.\nReset Button The reset button was hooked up to a pull up resistor and button. If you\u0026rsquo;ve heard the term pull up resistor numerous times before but never sat down to understand what it means / why we need one / how to decide on the value, then there is a great post here.\nThe most common time you use a pullup resitor is when you use a button. This is because when you use a button you want your input pin to read high when the button is not pressed and low when it is pressed (assuming pullup). Therefore we need the resistor for the low state when the pin is pulled to ground (without it VCC would be grounded). A picture might make that explanation more clear.\nThe value of the resistor is chosen with 3 competing objectives in mind:\n Want a low amount of current to be used when button is pushed low (large resistor) When high, want to ensure that the voltage divider with input pin allows pin to be held high (small resistor) Want to make sure switching speed is not impacted (small resistor)  In our case 1K is an okay choice because:\n Current on button press would be small: 5V / 1K = 5mA On button up, voltage divider would give input pin 3.25V: 3.3 (66\u0026frasl;67) = 3.25V (apparently input impedance can be calculated from the input leakage current on the data sheet R = 3.3 / 50n = 66K). To be checked experimentally, couldn\u0026rsquo;t find this info elsewhere in the data sheets. Don\u0026rsquo;t really care about switching speed (DC)  Decoupling Cap It took me quite a while to figure out I needed this guy. After a lot of trial and error I worked out, that even if the salt lamp was not connected to the breadboard (e.g just plugged into the mains), if I switched the salt lamp on it would reset the ESP8266 module!\nThe video below shows me successfully changing the state of the GPIO pin initially (led pin text changes between on and off). I then switch the lamp on (which is not connected to the circuit in any way). When I go back to the web UI to change the state of the pin, the ESP8266 has lost connection (does not change).\nYour browser does not support the video tag.  That is, even with the insulated power cables there was still enough noise to interupt the ESP\u0026rsquo;s power. Once I placed a decoupling cap (1uF) next to the module\u0026rsquo;s power supply it started operating normally again. This is actually what Espressif recommends you do anyway: \u0026ldquo;What factors must I consider when designing a robust power supply for the ESP8266?\u0026rdquo;.\nRelay \u0026amp; enclosure As the end goal of this project is to make a wifi powerboard the relay used would need to have specs to handle Australian mains electricity, 240V and 10A. Any relay on ebay that meets these specs should be fine.\nThe schematic below shows how everything was wired up. The BJT was used to isolate the GPIO pin from the ESP8266 from the input to the relay.\nPictured below is the relay I used along with a simplified schematic of how it is working. Basically the low voltage controller inputs are isolated from the high voltage mains. Setup VCC and GND and then use active low IN1 to turn the switch on and off. The ports NO and NC stand for normally open and normally closed respectively with COM being the common port. When IN1 is active the NO and COM are connected otherwise NC and COM are connected. The schematic is overly simplified because the relay is actually optocoupled as well, meaning a photodiode turns on the magnetic coil.\nTo prevent accidentally touching the relay live I chucked it in a PVC pipe and connected a plug to it. Wiring it up should hopefully be obvious.\nStill To Do:  Update web control  be able to control on/off speed be able to access from the internet add selector to connect to wifi network add option to disconnect from current network  Work out how to get the wifi module to load with program already flashed (have to re-program each time at the moment) 240V to 5V converter Replace voltage divider in voltage shifter with zener diode Add current sensing module Add voltage divider to receiver Current limiting BJT  "
},
{
	"uri": "https://isaachook.me/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://isaachook.me/",
	"title": "Isaac Hook",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://isaachook.me/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]